{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"SARS-CoV-2 Genome Assembly from Illumina Reads \u00b6 Welcome to the documentation for the nf-illumina2lineage pipeline. Overview \u00b6 This repository provides a complete pipeline for assembling and analyzing the genome of SARS-CoV-2 using Illumina paired-end sequencing data. It includes steps for quality control, mapping, variant calling, primer clipping, consensus sequence generation, lineage annotation, and phylogenetic analysis. Key Features \u00b6 Automated environment setup using mamba and conda Comprehensive quality control with fastqc and fastp Mapping and visualization using minimap2 , samtools , and IGV Primer sequence clipping for clean alignments Variant calling with freebayes and VCF filtering with vcfR Consensus sequence generation and lineage assignment with pangolin Phylogenetic analysis and multiple sequence alignment with mafft and iqtree Clear documentation and modular structure System Requirements \u00b6 Operating System : Linux (tested on Fedora 38) Processor : Intel i5 or equivalent, with multithreading support Memory : Minimum 8 GB Software : Anaconda/Miniconda, mamba, R, and the listed bioinformatics tools Dependencies \u00b6 The pipeline requires the following tools, managed via mamba : - QC: fastqc , fastp , multiqc - Mapping: minimap2 , samtools , bamclipper - Variant Calling: freebayes , vcftools , bcftools - Sequence Analysis: vcfR , mafft , iqtree , pangolin - Visualization: gnuplot , IGV , jalview Installation \u00b6 Clone the repository: bash git clone https://github.com/bibymaths/nf-illumina2lineage.git cd nf-illumina2lineage Install mamba and create the environment: bash wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh\" bash Mambaforge-Linux-x86_64.sh conda update -y conda mamba env create -p ./envs/projectSARS --file environment.yaml mamba activate ./envs/projectSARS Pipeline Workflow \u00b6 Environment Setup : Install dependencies and configure the environment. Data Preparation : Download input datasets and reference genomes. Quality Control : Evaluate and preprocess raw sequencing reads. Mapping : Align reads to the reference genome. Primer Clipping : Remove primer sequences from alignments. Variant Calling : Identify variants in the genome. Filtering & Masking : Use an R script for QC and filtering of VCF files. Consensus Generation : Generate consensus sequences from filtered variants. Lineage Annotation : Assign SARS-CoV-2 lineages using pangolin . Phylogenetic Analysis : Perform multiple sequence alignment and build phylogenetic trees. Input Data \u00b6 Illumina paired-end sequencing data SARS-CoV-2 reference genome (NCBI accession: NC_045512.2) Output \u00b6 Quality control reports ( .html , .json ) Aligned sequences in BAM and VCF formats Consensus sequences in FASTA format Lineage annotations Phylogenetic trees and visualizations Usage \u00b6 Edit the config.sh file to specify input data paths and parameters. Run the pipeline: bash bash scripts/run_pipeline.sh View results in the results/ directory. License \u00b6 This project is licensed under the MIT License. See the LICENSE file for details. Contact \u00b6 For questions or issues, please contact: - Abhinav Mishra - Email: mishraabhinav36@gmail.com","title":"Home"},{"location":"index.html#sars-cov-2-genome-assembly-from-illumina-reads","text":"Welcome to the documentation for the nf-illumina2lineage pipeline.","title":"SARS-CoV-2 Genome Assembly from Illumina Reads"},{"location":"index.html#overview","text":"This repository provides a complete pipeline for assembling and analyzing the genome of SARS-CoV-2 using Illumina paired-end sequencing data. It includes steps for quality control, mapping, variant calling, primer clipping, consensus sequence generation, lineage annotation, and phylogenetic analysis.","title":"Overview"},{"location":"index.html#key-features","text":"Automated environment setup using mamba and conda Comprehensive quality control with fastqc and fastp Mapping and visualization using minimap2 , samtools , and IGV Primer sequence clipping for clean alignments Variant calling with freebayes and VCF filtering with vcfR Consensus sequence generation and lineage assignment with pangolin Phylogenetic analysis and multiple sequence alignment with mafft and iqtree Clear documentation and modular structure","title":"Key Features"},{"location":"index.html#system-requirements","text":"Operating System : Linux (tested on Fedora 38) Processor : Intel i5 or equivalent, with multithreading support Memory : Minimum 8 GB Software : Anaconda/Miniconda, mamba, R, and the listed bioinformatics tools","title":"System Requirements"},{"location":"index.html#dependencies","text":"The pipeline requires the following tools, managed via mamba : - QC: fastqc , fastp , multiqc - Mapping: minimap2 , samtools , bamclipper - Variant Calling: freebayes , vcftools , bcftools - Sequence Analysis: vcfR , mafft , iqtree , pangolin - Visualization: gnuplot , IGV , jalview","title":"Dependencies"},{"location":"index.html#installation","text":"Clone the repository: bash git clone https://github.com/bibymaths/nf-illumina2lineage.git cd nf-illumina2lineage Install mamba and create the environment: bash wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh\" bash Mambaforge-Linux-x86_64.sh conda update -y conda mamba env create -p ./envs/projectSARS --file environment.yaml mamba activate ./envs/projectSARS","title":"Installation"},{"location":"index.html#pipeline-workflow","text":"Environment Setup : Install dependencies and configure the environment. Data Preparation : Download input datasets and reference genomes. Quality Control : Evaluate and preprocess raw sequencing reads. Mapping : Align reads to the reference genome. Primer Clipping : Remove primer sequences from alignments. Variant Calling : Identify variants in the genome. Filtering & Masking : Use an R script for QC and filtering of VCF files. Consensus Generation : Generate consensus sequences from filtered variants. Lineage Annotation : Assign SARS-CoV-2 lineages using pangolin . Phylogenetic Analysis : Perform multiple sequence alignment and build phylogenetic trees.","title":"Pipeline Workflow"},{"location":"index.html#input-data","text":"Illumina paired-end sequencing data SARS-CoV-2 reference genome (NCBI accession: NC_045512.2)","title":"Input Data"},{"location":"index.html#output","text":"Quality control reports ( .html , .json ) Aligned sequences in BAM and VCF formats Consensus sequences in FASTA format Lineage annotations Phylogenetic trees and visualizations","title":"Output"},{"location":"index.html#usage","text":"Edit the config.sh file to specify input data paths and parameters. Run the pipeline: bash bash scripts/run_pipeline.sh View results in the results/ directory.","title":"Usage"},{"location":"index.html#license","text":"This project is licensed under the MIT License. See the LICENSE file for details.","title":"License"},{"location":"index.html#contact","text":"For questions or issues, please contact: - Abhinav Mishra - Email: mishraabhinav36@gmail.com","title":"Contact"},{"location":"about.html","text":"About This Project \u00b6 This pipeline was developed as part of the SARS-2 Bioinformatics & Data Science course offered jointly by Freie Universit\u00e4t Berlin and the Robert Koch Institute . Objectives \u00b6 The aim was to create a reproducible, modular, and fully-documented pipeline for assembling and analyzing SARS-CoV-2 genomes from Illumina paired-end sequencing data using best-practice bioinformatics tools. Author \u00b6 Abhinav Mishra Email: mishraabhinav@gmail.com Instructors \u00b6 Max von Kleist , Robert Koch Institute Martin H\u00f6lzer , Freie Universit\u00e4t Berlin Course Info \u00b6 You can view on GitHub Device and Environment \u00b6 OS : Fedora Linux 38 Kernel : Linux 6.4.15-200.fc38.x86_64 Processor : Intel i5-8250U (8 cores) Memory : 8 GB GPU : Intel UHD 620 Acknowledgments \u00b6 Special thanks to the course instructors and the contributing open-source bioinformatics community whose tools made this project possible. License \u00b6 This work is licensed under the BSD 3-Clause License. For a list of references, see references.md .","title":"About"},{"location":"about.html#about-this-project","text":"This pipeline was developed as part of the SARS-2 Bioinformatics & Data Science course offered jointly by Freie Universit\u00e4t Berlin and the Robert Koch Institute .","title":"About This Project"},{"location":"about.html#objectives","text":"The aim was to create a reproducible, modular, and fully-documented pipeline for assembling and analyzing SARS-CoV-2 genomes from Illumina paired-end sequencing data using best-practice bioinformatics tools.","title":"Objectives"},{"location":"about.html#author","text":"Abhinav Mishra Email: mishraabhinav@gmail.com","title":"Author"},{"location":"about.html#instructors","text":"Max von Kleist , Robert Koch Institute Martin H\u00f6lzer , Freie Universit\u00e4t Berlin","title":"Instructors"},{"location":"about.html#course-info","text":"You can view on GitHub","title":"Course Info"},{"location":"about.html#device-and-environment","text":"OS : Fedora Linux 38 Kernel : Linux 6.4.15-200.fc38.x86_64 Processor : Intel i5-8250U (8 cores) Memory : 8 GB GPU : Intel UHD 620","title":"Device and Environment"},{"location":"about.html#acknowledgments","text":"Special thanks to the course instructors and the contributing open-source bioinformatics community whose tools made this project possible.","title":"Acknowledgments"},{"location":"about.html#license","text":"This work is licensed under the BSD 3-Clause License. For a list of references, see references.md .","title":"License"},{"location":"containers.html","text":"Container Support \u00b6 This pipeline supports containerized execution using Docker , which ensures reproducibility and simplifies environment setup. Using Docker \u00b6 To run the pipeline with Docker: nextflow run main.nf -profile docker Make sure Docker is installed and the current user has permission to run Docker commands (e.g., add user to docker group). Dockerfile \u00b6 A Dockerfile is provided to build a custom container image: docker build -t nf-illumina2lineage . Use your image with: nextflow run main.nf -with-docker nf-illumina2lineage Profile Configuration (Optional) \u00b6 Customize container settings in nextflow.config : process.container = 'nf-illumina2lineage' docker.enabled = true \ud83d\udce6 Using containers is recommended for dependency consistency and reproducibility across systems.","title":"Docker/Singularity"},{"location":"containers.html#container-support","text":"This pipeline supports containerized execution using Docker , which ensures reproducibility and simplifies environment setup.","title":"Container Support"},{"location":"containers.html#using-docker","text":"To run the pipeline with Docker: nextflow run main.nf -profile docker Make sure Docker is installed and the current user has permission to run Docker commands (e.g., add user to docker group).","title":"Using Docker"},{"location":"containers.html#dockerfile","text":"A Dockerfile is provided to build a custom container image: docker build -t nf-illumina2lineage . Use your image with: nextflow run main.nf -with-docker nf-illumina2lineage","title":"Dockerfile"},{"location":"containers.html#profile-configuration-optional","text":"Customize container settings in nextflow.config : process.container = 'nf-illumina2lineage' docker.enabled = true \ud83d\udce6 Using containers is recommended for dependency consistency and reproducibility across systems.","title":"Profile Configuration (Optional)"},{"location":"lineage_qc.html","text":"Lineage Annotation and Consensus Quality Control \u00b6 This section explains how the pipeline handles lineage annotation and consensus sequence quality assessment. Lineage Annotation with Pangolin \u00b6 pangolin is used to assign SARS-CoV-2 lineages based on the consensus sequences generated by the pipeline. Input \u00b6 consensus-seqs.fasta (combined consensus sequences for all samples) Output \u00b6 lineage_report.csv \u2014 Pangolin lineage calls with sample metadata Additional summary files: summary.csv , pangolin.json (optional) Usage \u00b6 Pangolin is executed via the following command in the pipeline: pangolin -t 8 consensus-seqs.fasta Consensus QC with PRESIDENT \u00b6 PRESIDENT evaluates consensus sequences by comparing them to the reference genome. Checks Performed \u00b6 Pairwise nucleotide identity Ambiguous base counts Masked regions Input \u00b6 reference.fasta consensus-seqs.fasta Output \u00b6 Summary reports written to the output/ directory .html and tabular output formats depending on PRESIDENT version Usage \u00b6 Executed as part of the pipeline: president -r reference.fasta -q consensus-seqs.fasta -t 8 -a -p output/ -f consensus_ \ud83d\udcc8 These results help assess sequence reliability before downstream analysis like phylogenetics.","title":"Lineage & QC"},{"location":"lineage_qc.html#lineage-annotation-and-consensus-quality-control","text":"This section explains how the pipeline handles lineage annotation and consensus sequence quality assessment.","title":"Lineage Annotation and Consensus Quality Control"},{"location":"lineage_qc.html#lineage-annotation-with-pangolin","text":"pangolin is used to assign SARS-CoV-2 lineages based on the consensus sequences generated by the pipeline.","title":"Lineage Annotation with Pangolin"},{"location":"lineage_qc.html#input","text":"consensus-seqs.fasta (combined consensus sequences for all samples)","title":"Input"},{"location":"lineage_qc.html#output","text":"lineage_report.csv \u2014 Pangolin lineage calls with sample metadata Additional summary files: summary.csv , pangolin.json (optional)","title":"Output"},{"location":"lineage_qc.html#usage","text":"Pangolin is executed via the following command in the pipeline: pangolin -t 8 consensus-seqs.fasta","title":"Usage"},{"location":"lineage_qc.html#consensus-qc-with-president","text":"PRESIDENT evaluates consensus sequences by comparing them to the reference genome.","title":"Consensus QC with PRESIDENT"},{"location":"lineage_qc.html#checks-performed","text":"Pairwise nucleotide identity Ambiguous base counts Masked regions","title":"Checks Performed"},{"location":"lineage_qc.html#input_1","text":"reference.fasta consensus-seqs.fasta","title":"Input"},{"location":"lineage_qc.html#output_1","text":"Summary reports written to the output/ directory .html and tabular output formats depending on PRESIDENT version","title":"Output"},{"location":"lineage_qc.html#usage_1","text":"Executed as part of the pipeline: president -r reference.fasta -q consensus-seqs.fasta -t 8 -a -p output/ -f consensus_ \ud83d\udcc8 These results help assess sequence reliability before downstream analysis like phylogenetics.","title":"Usage"},{"location":"outputs.html","text":"Output Files and Directory Structure \u00b6 The pipeline generates multiple outputs at each stage of analysis. Below is a summary of key files and their locations. Directory Structure \u00b6 results/ \u251c\u2500\u2500 qc/ \u2502 \u251c\u2500\u2500 *.fastqc.html # FastQC reports \u2502 \u251c\u2500\u2500 *.fastp.html/json # Fastp reports \u2502 \u2514\u2500\u2500 multiqc_report.html # Summary report \u251c\u2500\u2500 alignments/ \u2502 \u251c\u2500\u2500 *.sam # Raw alignments \u2502 \u251c\u2500\u2500 *.sorted.bam # Sorted BAM files \u2502 \u2514\u2500\u2500 *.bai # BAM index files \u251c\u2500\u2500 clipped/ \u2502 \u2514\u2500\u2500 *.primerclipped.bam # Primer-removed alignments \u251c\u2500\u2500 variants/ \u2502 \u2514\u2500\u2500 *.vcf # Raw variant calls \u251c\u2500\u2500 consensus/ \u2502 \u2514\u2500\u2500 *.fasta # Consensus genome sequences \u251c\u2500\u2500 phylogeny/ \u2502 \u251c\u2500\u2500 alignment.fasta # MSA file \u2502 \u2514\u2500\u2500 *.treefile # Phylogenetic tree \u251c\u2500\u2500 lineage/ \u2502 \u2514\u2500\u2500 lineage_report.csv # Pangolin lineage calls \u2514\u2500\u2500 qc_consensus/ \u2514\u2500\u2500 output/ # PRESIDENT quality reports Output Types \u00b6 Stage File Type(s) Description Quality Control .html , .json QC and trimming reports Mapping .bam , .bai Aligned reads, indexed Primer Clipping .primerclipped.bam Primer-trimmed alignments Variant Calling .vcf Raw variant calls Consensus .fasta Consensus genome sequences Lineage Annotation .csv Pangolin lineage table Phylogenetic Tree .fasta , .treefile MSA + tree structure QC (Consensus) output/ files Nucleotide identity, ambiguities \ud83d\udcc1 All files are written into structured subdirectories under results/ by default. You can modify the output paths via nextflow.config or process-specific directives.","title":"Output Structure"},{"location":"outputs.html#output-files-and-directory-structure","text":"The pipeline generates multiple outputs at each stage of analysis. Below is a summary of key files and their locations.","title":"Output Files and Directory Structure"},{"location":"outputs.html#directory-structure","text":"results/ \u251c\u2500\u2500 qc/ \u2502 \u251c\u2500\u2500 *.fastqc.html # FastQC reports \u2502 \u251c\u2500\u2500 *.fastp.html/json # Fastp reports \u2502 \u2514\u2500\u2500 multiqc_report.html # Summary report \u251c\u2500\u2500 alignments/ \u2502 \u251c\u2500\u2500 *.sam # Raw alignments \u2502 \u251c\u2500\u2500 *.sorted.bam # Sorted BAM files \u2502 \u2514\u2500\u2500 *.bai # BAM index files \u251c\u2500\u2500 clipped/ \u2502 \u2514\u2500\u2500 *.primerclipped.bam # Primer-removed alignments \u251c\u2500\u2500 variants/ \u2502 \u2514\u2500\u2500 *.vcf # Raw variant calls \u251c\u2500\u2500 consensus/ \u2502 \u2514\u2500\u2500 *.fasta # Consensus genome sequences \u251c\u2500\u2500 phylogeny/ \u2502 \u251c\u2500\u2500 alignment.fasta # MSA file \u2502 \u2514\u2500\u2500 *.treefile # Phylogenetic tree \u251c\u2500\u2500 lineage/ \u2502 \u2514\u2500\u2500 lineage_report.csv # Pangolin lineage calls \u2514\u2500\u2500 qc_consensus/ \u2514\u2500\u2500 output/ # PRESIDENT quality reports","title":"Directory Structure"},{"location":"outputs.html#output-types","text":"Stage File Type(s) Description Quality Control .html , .json QC and trimming reports Mapping .bam , .bai Aligned reads, indexed Primer Clipping .primerclipped.bam Primer-trimmed alignments Variant Calling .vcf Raw variant calls Consensus .fasta Consensus genome sequences Lineage Annotation .csv Pangolin lineage table Phylogenetic Tree .fasta , .treefile MSA + tree structure QC (Consensus) output/ files Nucleotide identity, ambiguities \ud83d\udcc1 All files are written into structured subdirectories under results/ by default. You can modify the output paths via nextflow.config or process-specific directives.","title":"Output Types"},{"location":"parameters.html","text":"Pipeline Parameters \u00b6 This section lists the configurable parameters used in the pipeline. These can be adjusted using a custom configuration file or passed directly via the command line. Core Parameters \u00b6 Parameter Default Description reads *.fastq.gz Glob pattern to match input FASTQ files reference reference.fasta Reference genome in FASTA format threads 8 Number of threads to use for multithreaded tools Optional Profiles \u00b6 You can use execution profiles to control behavior, e.g.: nextflow run main.nf -profile docker Available Profiles \u00b6 docker : Runs processes inside Docker containers using the specified image. singularity : Runs in Singularity containers (if configured). local : Default execution on local machine without containers. Custom Configuration \u00b6 To override parameters, use -params-file : nextflow run main.nf -params-file custom_params.json Example custom_params.json : { \"reads\": \"data/*.fq.gz\", \"reference\": \"data/NC_045512.2.fasta\", \"threads\": 16 } \ud83d\udca1 All parameters can also be set directly via -params flag or in nextflow.config .","title":"Parameters"},{"location":"parameters.html#pipeline-parameters","text":"This section lists the configurable parameters used in the pipeline. These can be adjusted using a custom configuration file or passed directly via the command line.","title":"Pipeline Parameters"},{"location":"parameters.html#core-parameters","text":"Parameter Default Description reads *.fastq.gz Glob pattern to match input FASTQ files reference reference.fasta Reference genome in FASTA format threads 8 Number of threads to use for multithreaded tools","title":"Core Parameters"},{"location":"parameters.html#optional-profiles","text":"You can use execution profiles to control behavior, e.g.: nextflow run main.nf -profile docker","title":"Optional Profiles"},{"location":"parameters.html#available-profiles","text":"docker : Runs processes inside Docker containers using the specified image. singularity : Runs in Singularity containers (if configured). local : Default execution on local machine without containers.","title":"Available Profiles"},{"location":"parameters.html#custom-configuration","text":"To override parameters, use -params-file : nextflow run main.nf -params-file custom_params.json Example custom_params.json : { \"reads\": \"data/*.fq.gz\", \"reference\": \"data/NC_045512.2.fasta\", \"threads\": 16 } \ud83d\udca1 All parameters can also be set directly via -params flag or in nextflow.config .","title":"Custom Configuration"},{"location":"processes.html","text":"Process Details \u00b6 This section describes each Nextflow process in the pipeline, including their inputs, outputs, and core functionality. downloadData \u00b6 Purpose : Download Illumina sequencing data archive and extract contents. - Input : None - Output : Raw .fastq.gz files referenceGenome \u00b6 Purpose : Download SARS-CoV-2 reference genome (NC_045512.2) using NCBI Entrez Direct. - Input : None - Output : reference.fasta qc \u00b6 Purpose : Quality control and cleaning of raw sequencing reads. - Input : Paired-end FASTQ files - Output : - Cleaned FASTQ files ( pair*.R1/2.clean.fastq.gz ) - FastQC reports ( .html , .zip ) - Fastp reports ( .json , .html ) - MultiQC summary mapping \u00b6 Purpose : Align reads to reference genome and produce sorted, indexed BAM files. - Input : Cleaned FASTQ files, reference.fasta - Output : Sorted and indexed BAM files ( .sorted.bam , .bai ) primerClipping \u00b6 Purpose : Clip primer sequences using a CleanPlex BEDPE file and bamclipper . - Input : Sorted BAM files - Output : Primer-clipped BAM files ( .primerclipped.bam ) variantCalling \u00b6 Purpose : Call variants from aligned BAM files using freebayes . - Input : Primer-clipped BAM files, reference.fasta - Output : Raw VCF files ( freebayes-illumina*.vcf ) consensusGeneration \u00b6 Purpose : Generate consensus sequences using bcftools from VCFs. - Input : VCF files, reference.fasta - Output : FASTA files for consensus sequences ( consensus-*.fasta , consensus-seqs.fasta ) pangolinLineage \u00b6 Purpose : Assign SARS-CoV-2 lineages using pangolin . - Input : Combined consensus FASTA file - Output : lineage_report.csv , optional TSV and summary files consensusQC \u00b6 Purpose : Assess consensus quality using president . - Input : Consensus FASTA, reference.fasta - Output : QC summary in output/ folder phylogeny \u00b6 Purpose : Perform multiple sequence alignment and build phylogenetic tree. - Input : Consensus FASTA file - Output : alignment.fasta , IQ-TREE outputs (e.g., .treefile , .log ) For a visual overview, see the Workflow section.","title":"Process Details"},{"location":"processes.html#process-details","text":"This section describes each Nextflow process in the pipeline, including their inputs, outputs, and core functionality.","title":"Process Details"},{"location":"processes.html#downloaddata","text":"Purpose : Download Illumina sequencing data archive and extract contents. - Input : None - Output : Raw .fastq.gz files","title":"downloadData"},{"location":"processes.html#referencegenome","text":"Purpose : Download SARS-CoV-2 reference genome (NC_045512.2) using NCBI Entrez Direct. - Input : None - Output : reference.fasta","title":"referenceGenome"},{"location":"processes.html#qc","text":"Purpose : Quality control and cleaning of raw sequencing reads. - Input : Paired-end FASTQ files - Output : - Cleaned FASTQ files ( pair*.R1/2.clean.fastq.gz ) - FastQC reports ( .html , .zip ) - Fastp reports ( .json , .html ) - MultiQC summary","title":"qc"},{"location":"processes.html#mapping","text":"Purpose : Align reads to reference genome and produce sorted, indexed BAM files. - Input : Cleaned FASTQ files, reference.fasta - Output : Sorted and indexed BAM files ( .sorted.bam , .bai )","title":"mapping"},{"location":"processes.html#primerclipping","text":"Purpose : Clip primer sequences using a CleanPlex BEDPE file and bamclipper . - Input : Sorted BAM files - Output : Primer-clipped BAM files ( .primerclipped.bam )","title":"primerClipping"},{"location":"processes.html#variantcalling","text":"Purpose : Call variants from aligned BAM files using freebayes . - Input : Primer-clipped BAM files, reference.fasta - Output : Raw VCF files ( freebayes-illumina*.vcf )","title":"variantCalling"},{"location":"processes.html#consensusgeneration","text":"Purpose : Generate consensus sequences using bcftools from VCFs. - Input : VCF files, reference.fasta - Output : FASTA files for consensus sequences ( consensus-*.fasta , consensus-seqs.fasta )","title":"consensusGeneration"},{"location":"processes.html#pangolinlineage","text":"Purpose : Assign SARS-CoV-2 lineages using pangolin . - Input : Combined consensus FASTA file - Output : lineage_report.csv , optional TSV and summary files","title":"pangolinLineage"},{"location":"processes.html#consensusqc","text":"Purpose : Assess consensus quality using president . - Input : Consensus FASTA, reference.fasta - Output : QC summary in output/ folder","title":"consensusQC"},{"location":"processes.html#phylogeny","text":"Purpose : Perform multiple sequence alignment and build phylogenetic tree. - Input : Consensus FASTA file - Output : alignment.fasta , IQ-TREE outputs (e.g., .treefile , .log ) For a visual overview, see the Workflow section.","title":"phylogeny"},{"location":"quickstart.html","text":"Quickstart Guide \u00b6 This guide will help you get the pipeline up and running as quickly as possible. Step 1: Clone the Repository \u00b6 git clone https://github.com/bibymaths/nf-illumina2lineage.git cd nf-illumina2lineage Step 2: Install Mamba (if not already installed) \u00b6 wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh\" bash Mambaforge-Linux-x86_64.sh Step 3: Create and Activate the Environment \u00b6 conda update -y conda mamba env create -p --file environment.yaml mamba activate sars_genome_assembly Set up Java and Nexflow \u00b6 curl -s https://get.sdkman.io | bash In new terminal sdk install java 17.0.10-tem java -version curl -s https://get.nextflow.io | bash chmod +x nextflow mkdir -p $HOME/.local/bin/ mv nextflow $HOME/.local/bin/ nextflow info Before you launch Nextflow, unset the Conda\u2010JDK variables and point to SDKMAN\u2019s inside the conda environment. unset JAVA_CMD JAVA_HOME export JAVA_HOME=\"$HOME/.sdkman/candidates/java/current\" export JAVA_CMD=\"$JAVA_HOME/bin/java\" Nextflow requires Bash 3.2 (or later) and Java 17 (or later, up to 24) to be installed. More information on Nextflow installation . Step 4: Run the Pipeline with Nextflow \u00b6 nextflow run main.nf To use a Docker profile: nextflow run main.nf -profile docker Input Data Requirements \u00b6 Illumina paired-end FASTQ files SARS-CoV-2 reference genome (automatically downloaded by the pipeline) Output Overview \u00b6 Cleaned FASTQ files and QC reports Sorted, indexed BAM files VCF variant files Consensus sequences (FASTA) Pangolin lineage assignments Phylogenetic tree (Newick format) For advanced configuration, see the parameters section. \ud83d\udca1 Tip: Use multiqc to summarize all QC results in one place. You're now ready to use the pipeline!","title":"Quickstart"},{"location":"quickstart.html#quickstart-guide","text":"This guide will help you get the pipeline up and running as quickly as possible.","title":"Quickstart Guide"},{"location":"quickstart.html#step-1-clone-the-repository","text":"git clone https://github.com/bibymaths/nf-illumina2lineage.git cd nf-illumina2lineage","title":"Step 1: Clone the Repository"},{"location":"quickstart.html#step-2-install-mamba-if-not-already-installed","text":"wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh\" bash Mambaforge-Linux-x86_64.sh","title":"Step 2: Install Mamba (if not already installed)"},{"location":"quickstart.html#step-3-create-and-activate-the-environment","text":"conda update -y conda mamba env create -p --file environment.yaml mamba activate sars_genome_assembly","title":"Step 3: Create and Activate the Environment"},{"location":"quickstart.html#set-up-java-and-nexflow","text":"curl -s https://get.sdkman.io | bash In new terminal sdk install java 17.0.10-tem java -version curl -s https://get.nextflow.io | bash chmod +x nextflow mkdir -p $HOME/.local/bin/ mv nextflow $HOME/.local/bin/ nextflow info Before you launch Nextflow, unset the Conda\u2010JDK variables and point to SDKMAN\u2019s inside the conda environment. unset JAVA_CMD JAVA_HOME export JAVA_HOME=\"$HOME/.sdkman/candidates/java/current\" export JAVA_CMD=\"$JAVA_HOME/bin/java\" Nextflow requires Bash 3.2 (or later) and Java 17 (or later, up to 24) to be installed. More information on Nextflow installation .","title":"Set up Java and Nexflow"},{"location":"quickstart.html#step-4-run-the-pipeline-with-nextflow","text":"nextflow run main.nf To use a Docker profile: nextflow run main.nf -profile docker","title":"Step 4: Run the Pipeline with Nextflow"},{"location":"quickstart.html#input-data-requirements","text":"Illumina paired-end FASTQ files SARS-CoV-2 reference genome (automatically downloaded by the pipeline)","title":"Input Data Requirements"},{"location":"quickstart.html#output-overview","text":"Cleaned FASTQ files and QC reports Sorted, indexed BAM files VCF variant files Consensus sequences (FASTA) Pangolin lineage assignments Phylogenetic tree (Newick format) For advanced configuration, see the parameters section. \ud83d\udca1 Tip: Use multiqc to summarize all QC results in one place. You're now ready to use the pipeline!","title":"Output Overview"},{"location":"references.html","text":"References \u00b6 bamstats.pl script, 2012-2014 Genome Research Ltd (Author: Petr Danecek pd3@sanger.ac.uk ) Anon, 2020. Anaconda Software Distribution, Anaconda Inc. Available at: https://docs.anaconda.com/. Philip Ewels, M\u00e5ns Magnusson, Sverker Lundin, Max K\u00e4ller, MultiQC: summarize analysis results for multiple tools and samples in a single report, Bioinformatics, Volume 32, Issue 19, October 2016, Pages 3047\u20133048, https://doi.org/10.1093/bioinformatics/btw354 Andrews, S. (2010). FastQC: A Quality Control Tool for High Throughput Sequence Data [Online]. Shifu Chen, Yanqing Zhou, Yaru Chen, Jia Gu, fastp: an ultra-fast all-in-one FASTQ preprocessor, Bioinformatics, Volume 34, Issue 17, September 2018, Pages i884\u2013i890, https://doi.org/10.1093/bioinformatics/bty560 Heng Li, Minimap2: pairwise alignment for nucleotide sequences, Bioinformatics, Volume 34, Issue 18, September 2018, Pages 3094\u20133100, https://doi.org/10.1093/bioinformatics/bty191 Petr Danecek, James K Bonfield, Jennifer Liddle, John Marshall, Valeriu Ohan, Martin O Pollard, Andrew Whitwham, Thomas Keane, Shane A McCarthy, Robert M Davies, Heng Li, Twelve years of SAMtools and BCFtools, GigaScience, Volume 10, Issue 2, February 2021, giab008, https://doi.org/10.1093/gigascience/giab008 Robinson, J. T., Thorvaldsd\u00f3ttir, H., Winckler, W., Guttman, M., Lander, E. S., Getz, G., & Mesirov, J. P. (2011). Integrative genomics viewer. Nature biotechnology, 29(1), 24\u201326. https://doi.org/10.1038/nbt.1754 O'Toole \u00c1, Hill V, Pybus OG et al. Tracking the international spread of SARS-CoV-2 lineages B.1.1.7 and B.1.351/501Y-V2 [version 1; peer review: 3 approved]. Wellcome Open Res 2021, 6:121 (https://doi.org/10.12688/wellcomeopenres.16661.1) \u00c1ine O\u2019Toole, Emily Scher, Anthony Underwood, Ben Jackson, Verity Hill, John T McCrone, Rachel Colquhoun, Chris Ruis, Khalil Abu-Dahab, Ben Taylor, Corin Yeats, Louis du Plessis, Daniel Maloney, Nathan Medd, Stephen W Attwood, David M Aanensen, Edward C Holmes, Oliver G Pybus, Andrew Rambaut, Assignment of epidemiological lineages in an emerging pandemic using the pangolin tool, Virus Evolution, Volume 7, Issue 2, December 2021, veab064, https://doi.org/10.1093/ve/veab064 Rambaut, A., Holmes, E.C., O\u2019Toole, \u00c1. et al. A dynamic nomenclature proposal for SARS-CoV-2 lineages to assist genomic epidemiology. Nat Microbiol 5, 1403\u20131407 (2020). https://doi.org/10.1038/s41564-020-0770-5 Tool for QC with consensus sequences https://github.com/rki-mf1/president Au, C., Ho, D., Kwong, A. et al. BAMClipper: removing primers from alignments to minimize false-negative mutations in amplicon next-generation sequencing. Sci Rep 7, 1567 (2017). https://doi.org/10.1038/s41598-017-01703-6 Garrison E, Marth G. Haplotype-based variant detection from short-read sequencing. arXiv preprint arXiv:1207.3907 [q-bio.GN] 2012 Vcflib and tools for processing the VCF variant call format. Erik Garrison, Zev N. Kronenberg, Eric T. Dawson, Brent S. Pedersen, Pjotr Prins. bioRxiv 2021.05.21.445151; doi: https://doi.org/10.1101/2021.05.21.445151 Petr Danecek, Adam Auton, Goncalo Abecasis, Cornelis A. Albers, Eric Banks, Mark A. DePristo, Robert E. Handsaker, Gerton Lunter, Gabor T. Marth, Stephen T. Sherry, Gilean McVean, Richard Durbin, 1000 Genomes Project Analysis Group, The variant call format and VCFtools, Bioinformatics, Volume 27, Issue 15, August 2011, Pages 2156\u20132158, https://doi.org/10.1093/bioinformatics/btr330 Waterhouse, A.M., Procter, J.B., Martin, D.M.A, Clamp, M., Barton, G.J (2009), \"Jalview version 2: A Multiple Sequence Alignment and Analysis Workbench,\u201d Bioinformatics 25 (9) 1189-1191 doi: 10.1093/bioinformatics/btp033 Nguyen, L. T., Schmidt, H. A., von Haeseler, A., & Minh, B. Q. (2015). IQ-TREE: a fast and effective stochastic algorithm for estimating maximum-likelihood phylogenies. Molecular biology and evolution, 32(1), 268\u2013274. https://doi.org/10.1093/molbev/msu300 Bui Quang Minh, Heiko A Schmidt, Olga Chernomor, Dominik Schrempf, Michael D Woodhams, Arndt von Haeseler, Robert Lanfear, IQ-TREE 2: New Models and Efficient Methods for Phylogenetic Inference in the Genomic Era, Molecular Biology and Evolution, Volume 37, Issue 5, May 2020, Pages 1530\u20131534, https://doi.org/10.1093/molbev/msaa015 Aaron R. Quinlan, Ira M. Hall, BEDTools: a flexible suite of utilities for comparing genomic features, Bioinformatics, Volume 26, Issue 6, March 2010, Pages 841\u2013842, https://doi.org/10.1093/bioinformatics/btq033 Katoh, K., & Standley, D. M. (2013). MAFFT multiple sequence alignment software version 7: improvements in performance and usability. Molecular biology and evolution, 30(4), 772\u2013780. https://doi.org/10.1093/molbev/mst010 R Core Team (2022). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/. Knaus, B.J. and Gr\u00fcnwald, N.J. (2017), vcfr: a package to manipulate and visualize variant call format data in R. Mol Ecol Resour, 17: 44-53. https://doi.org/10.1111/1755-0998.12549 National Center for Biotechnology Information (NCBI)[Internet]. Bethesda (MD): National Library of Medicine (US), National Center for Biotechnology Information; [1988] \u2013 [cited 2023 Sep 29]. Available from: https://www.ncbi.nlm.nih.gov/ P. Di Tommaso, et al. Nextflow enables reproducible computational workflows. Nature Biotechnology 35, 316\u2013319 (2017) doi: 10.1038/nbt.3820","title":"References"},{"location":"references.html#references","text":"bamstats.pl script, 2012-2014 Genome Research Ltd (Author: Petr Danecek pd3@sanger.ac.uk ) Anon, 2020. Anaconda Software Distribution, Anaconda Inc. Available at: https://docs.anaconda.com/. Philip Ewels, M\u00e5ns Magnusson, Sverker Lundin, Max K\u00e4ller, MultiQC: summarize analysis results for multiple tools and samples in a single report, Bioinformatics, Volume 32, Issue 19, October 2016, Pages 3047\u20133048, https://doi.org/10.1093/bioinformatics/btw354 Andrews, S. (2010). FastQC: A Quality Control Tool for High Throughput Sequence Data [Online]. Shifu Chen, Yanqing Zhou, Yaru Chen, Jia Gu, fastp: an ultra-fast all-in-one FASTQ preprocessor, Bioinformatics, Volume 34, Issue 17, September 2018, Pages i884\u2013i890, https://doi.org/10.1093/bioinformatics/bty560 Heng Li, Minimap2: pairwise alignment for nucleotide sequences, Bioinformatics, Volume 34, Issue 18, September 2018, Pages 3094\u20133100, https://doi.org/10.1093/bioinformatics/bty191 Petr Danecek, James K Bonfield, Jennifer Liddle, John Marshall, Valeriu Ohan, Martin O Pollard, Andrew Whitwham, Thomas Keane, Shane A McCarthy, Robert M Davies, Heng Li, Twelve years of SAMtools and BCFtools, GigaScience, Volume 10, Issue 2, February 2021, giab008, https://doi.org/10.1093/gigascience/giab008 Robinson, J. T., Thorvaldsd\u00f3ttir, H., Winckler, W., Guttman, M., Lander, E. S., Getz, G., & Mesirov, J. P. (2011). Integrative genomics viewer. Nature biotechnology, 29(1), 24\u201326. https://doi.org/10.1038/nbt.1754 O'Toole \u00c1, Hill V, Pybus OG et al. Tracking the international spread of SARS-CoV-2 lineages B.1.1.7 and B.1.351/501Y-V2 [version 1; peer review: 3 approved]. Wellcome Open Res 2021, 6:121 (https://doi.org/10.12688/wellcomeopenres.16661.1) \u00c1ine O\u2019Toole, Emily Scher, Anthony Underwood, Ben Jackson, Verity Hill, John T McCrone, Rachel Colquhoun, Chris Ruis, Khalil Abu-Dahab, Ben Taylor, Corin Yeats, Louis du Plessis, Daniel Maloney, Nathan Medd, Stephen W Attwood, David M Aanensen, Edward C Holmes, Oliver G Pybus, Andrew Rambaut, Assignment of epidemiological lineages in an emerging pandemic using the pangolin tool, Virus Evolution, Volume 7, Issue 2, December 2021, veab064, https://doi.org/10.1093/ve/veab064 Rambaut, A., Holmes, E.C., O\u2019Toole, \u00c1. et al. A dynamic nomenclature proposal for SARS-CoV-2 lineages to assist genomic epidemiology. Nat Microbiol 5, 1403\u20131407 (2020). https://doi.org/10.1038/s41564-020-0770-5 Tool for QC with consensus sequences https://github.com/rki-mf1/president Au, C., Ho, D., Kwong, A. et al. BAMClipper: removing primers from alignments to minimize false-negative mutations in amplicon next-generation sequencing. Sci Rep 7, 1567 (2017). https://doi.org/10.1038/s41598-017-01703-6 Garrison E, Marth G. Haplotype-based variant detection from short-read sequencing. arXiv preprint arXiv:1207.3907 [q-bio.GN] 2012 Vcflib and tools for processing the VCF variant call format. Erik Garrison, Zev N. Kronenberg, Eric T. Dawson, Brent S. Pedersen, Pjotr Prins. bioRxiv 2021.05.21.445151; doi: https://doi.org/10.1101/2021.05.21.445151 Petr Danecek, Adam Auton, Goncalo Abecasis, Cornelis A. Albers, Eric Banks, Mark A. DePristo, Robert E. Handsaker, Gerton Lunter, Gabor T. Marth, Stephen T. Sherry, Gilean McVean, Richard Durbin, 1000 Genomes Project Analysis Group, The variant call format and VCFtools, Bioinformatics, Volume 27, Issue 15, August 2011, Pages 2156\u20132158, https://doi.org/10.1093/bioinformatics/btr330 Waterhouse, A.M., Procter, J.B., Martin, D.M.A, Clamp, M., Barton, G.J (2009), \"Jalview version 2: A Multiple Sequence Alignment and Analysis Workbench,\u201d Bioinformatics 25 (9) 1189-1191 doi: 10.1093/bioinformatics/btp033 Nguyen, L. T., Schmidt, H. A., von Haeseler, A., & Minh, B. Q. (2015). IQ-TREE: a fast and effective stochastic algorithm for estimating maximum-likelihood phylogenies. Molecular biology and evolution, 32(1), 268\u2013274. https://doi.org/10.1093/molbev/msu300 Bui Quang Minh, Heiko A Schmidt, Olga Chernomor, Dominik Schrempf, Michael D Woodhams, Arndt von Haeseler, Robert Lanfear, IQ-TREE 2: New Models and Efficient Methods for Phylogenetic Inference in the Genomic Era, Molecular Biology and Evolution, Volume 37, Issue 5, May 2020, Pages 1530\u20131534, https://doi.org/10.1093/molbev/msaa015 Aaron R. Quinlan, Ira M. Hall, BEDTools: a flexible suite of utilities for comparing genomic features, Bioinformatics, Volume 26, Issue 6, March 2010, Pages 841\u2013842, https://doi.org/10.1093/bioinformatics/btq033 Katoh, K., & Standley, D. M. (2013). MAFFT multiple sequence alignment software version 7: improvements in performance and usability. Molecular biology and evolution, 30(4), 772\u2013780. https://doi.org/10.1093/molbev/mst010 R Core Team (2022). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/. Knaus, B.J. and Gr\u00fcnwald, N.J. (2017), vcfr: a package to manipulate and visualize variant call format data in R. Mol Ecol Resour, 17: 44-53. https://doi.org/10.1111/1755-0998.12549 National Center for Biotechnology Information (NCBI)[Internet]. Bethesda (MD): National Library of Medicine (US), National Center for Biotechnology Information; [1988] \u2013 [cited 2023 Sep 29]. Available from: https://www.ncbi.nlm.nih.gov/ P. Di Tommaso, et al. Nextflow enables reproducible computational workflows. Nature Biotechnology 35, 316\u2013319 (2017) doi: 10.1038/nbt.3820","title":"References"},{"location":"workflow.html","text":"Pipeline Workflow Diagram and Overview \u00b6 This section outlines the logical structure of the pipeline and provides a visual overview of each step. Workflow Summary \u00b6 The pipeline consists of the following key stages: Environment Setup : Initialize and configure the bioinformatics environment. Data Preparation : Download SARS-CoV-2 reference genome and raw Illumina sequencing data. Quality Control : Assess and clean raw sequencing reads using fastqc , fastp , and multiqc . Mapping : Align cleaned reads to the SARS-CoV-2 reference genome using minimap2 and process alignments with samtools . Primer Clipping : Remove primer sequences from alignments using bamclipper . Variant Calling : Call genetic variants with freebayes . Filtering & Masking : Post-process variant calls using R scripts and vcfR . Consensus Generation : Generate consensus sequences using bcftools . Lineage Annotation : Annotate sequences using pangolin . Phylogenetic Analysis : Perform multiple sequence alignment with mafft and infer phylogeny using iqtree . Workflow Diagram \u00b6 Note : Each step is implemented as a separate Nextflow process and connected logically in main.nf . For process-specific logic and input/output, see the Process Details section.","title":"Workflow Diagram"},{"location":"workflow.html#pipeline-workflow-diagram-and-overview","text":"This section outlines the logical structure of the pipeline and provides a visual overview of each step.","title":"Pipeline Workflow Diagram and Overview"},{"location":"workflow.html#workflow-summary","text":"The pipeline consists of the following key stages: Environment Setup : Initialize and configure the bioinformatics environment. Data Preparation : Download SARS-CoV-2 reference genome and raw Illumina sequencing data. Quality Control : Assess and clean raw sequencing reads using fastqc , fastp , and multiqc . Mapping : Align cleaned reads to the SARS-CoV-2 reference genome using minimap2 and process alignments with samtools . Primer Clipping : Remove primer sequences from alignments using bamclipper . Variant Calling : Call genetic variants with freebayes . Filtering & Masking : Post-process variant calls using R scripts and vcfR . Consensus Generation : Generate consensus sequences using bcftools . Lineage Annotation : Annotate sequences using pangolin . Phylogenetic Analysis : Perform multiple sequence alignment with mafft and infer phylogeny using iqtree .","title":"Workflow Summary"},{"location":"workflow.html#workflow-diagram","text":"Note : Each step is implemented as a separate Nextflow process and connected logically in main.nf . For process-specific logic and input/output, see the Process Details section.","title":"Workflow Diagram"}]}